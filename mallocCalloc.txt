malloc:

Stands for "memory allocation."
Allocates a block of memory of a specified size but does not initialize the memory. 
The content of the newly allocated memory is undefined.
Syntax: void* malloc(size_t size);

Calloc:

Stands for "contiguous allocation."
Allocates memory for an array of elements, initializes all bytes to zero.
Syntax: void* calloc(size_t num, size_t size);

Malloc:
C malloc() method
The “malloc” or “memory allocation” method in C is used to dynamically allocate a single large block of memory with the specified size. 
It returns a pointer of type void which can be cast into a pointer of any form. 
It doesn’t Initialize memory at execution time so that it has initialized each block with the default garbage value initially. 

Syntax of malloc() in C
ptr = (cast-type*) malloc(byte-size)
For Example:

ptr = (int*) malloc(100 * sizeof(int));
Since the size of int is 4 bytes, this statement will allocate 400 bytes of memory. 
And, the pointer ptr holds the address of the first byte in the allocated memory.

Calloc: 
C calloc() method
“calloc” or “contiguous allocation” method in C is used to dynamically allocate the specified number of blocks of memory of the specified type. 
it is very much similar to malloc() but has two different points and these are:
It initializes each block with a default value ‘0’.
It has two parameters or arguments as compare to malloc().
Syntax of calloc() in C
ptr = (cast-type*)calloc(n, element-size);
here, n is the no. of elements and element-size is the size of each element.

For Example: 

ptr = (float*) calloc(25, sizeof(float));
This statement allocates contiguous space in memory for 25 elements each with the size of the float.
 
